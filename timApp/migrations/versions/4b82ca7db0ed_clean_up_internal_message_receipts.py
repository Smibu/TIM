"""Clean up internal message receipts

Revision ID: 4b82ca7db0ed
Revises: 2828a1ff48e8
Create Date: 2021-11-19 15:30:08.937140

"""

# revision identifiers, used by Alembic.
revision = "4b82ca7db0ed"
down_revision = "2828a1ff48e8"

import sqlalchemy as sa
from alembic import op

t_user = sa.Table(
    "useraccount",
    sa.MetaData(),
    sa.Column("id", sa.Integer()),
    sa.Column("name", sa.Text()),
)

t_usergroup = sa.Table(
    "usergroup",
    sa.MetaData(),
    sa.Column("id", sa.Integer()),
    sa.Column("name", sa.Text()),
)

t_internalmessage_readreceipt = sa.Table(
    "internalmessage_readreceipt",
    sa.MetaData(),
    sa.Column("rcpt_id", sa.Integer()),
    sa.Column("user_id", sa.Integer()),
    sa.Column("message_id", sa.Integer()),
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    results = connection.execute(
        sa.select(
            [
                t_user.c.id,
                t_usergroup.c.id,
                t_internalmessage_readreceipt.c.message_id,
            ]
        ).select_from(
            sa.join(
                sa.join(
                    t_usergroup,
                    t_internalmessage_readreceipt,
                    t_usergroup.c.id == t_internalmessage_readreceipt.c.rcpt_id,
                ),
                t_user,
                t_usergroup.c.name == t_user.c.name,
            )
        )
    ).fetchall()

    for user_id, ug_id, im_id in results:
        connection.execute(
            t_internalmessage_readreceipt.update()
            .where(
                (t_internalmessage_readreceipt.c.rcpt_id == ug_id)
                & (t_internalmessage_readreceipt.c.message_id == im_id)
            )
            .values(user_id=user_id)
        )

    op.execute(
        "ALTER TABLE internalmessage_readreceipt DROP CONSTRAINT internalmessage_readreceipt_pkey CASCADE"
    )
    op.alter_column(
        "internalmessage_readreceipt",
        "user_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.drop_constraint(
        "internalmessage_readreceipt_rcpt_id_fkey",
        "internalmessage_readreceipt",
        type_="foreignkey",
    )
    op.drop_column("internalmessage_readreceipt", "rcpt_id")
    op.create_primary_key(
        "internalmessage_readreceipt_pkey",
        "internalmessage_readreceipt",
        ["message_id", "user_id"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column(
        "internalmessage_readreceipt",
        sa.Column(
            "rcpt_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            server_default="0",
        ),
    )
    op.create_foreign_key(
        "internalmessage_readreceipt_rcpt_id_fkey",
        "internalmessage_readreceipt",
        "usergroup",
        ["rcpt_id"],
        ["id"],
    )

    connection = op.get_bind()
    results = connection.execute(
        sa.select(
            [
                t_user.c.id,
                t_usergroup.c.id,
                t_internalmessage_readreceipt.c.message_id,
            ]
        ).select_from(
            sa.join(
                sa.join(
                    t_user,
                    t_internalmessage_readreceipt,
                    t_user.c.id == t_internalmessage_readreceipt.c.user_id,
                ),
                t_usergroup,
                t_usergroup.c.name == t_user.c.name,
            )
        )
    ).fetchall()

    for user_id, ug_id, im_id in results:
        connection.execute(
            t_internalmessage_readreceipt.update()
            .where(
                (t_internalmessage_readreceipt.c.user_id == user_id)
                & (t_internalmessage_readreceipt.c.message_id == im_id)
            )
            .values(rcpt_id=ug_id)
        )

    op.execute(
        "ALTER TABLE internalmessage_readreceipt DROP CONSTRAINT internalmessage_readreceipt_pkey CASCADE"
    )

    op.alter_column(
        "internalmessage_readreceipt",
        "user_id",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.create_primary_key(
        "internalmessage_readreceipt_pkey",
        "internalmessage_readreceipt",
        ["message_id", "rcpt_id"],
    )
    # ### end Alembic commands ###
