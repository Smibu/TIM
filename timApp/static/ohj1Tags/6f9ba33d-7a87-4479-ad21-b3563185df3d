<pre><code>    // Jos kayttaja antanut jotain muuta kuin positiivisia 
    // kokonaislukuja, ei yritetakaan laskea lukuja yhteen
    if (OnkoVainLukuja(lukusyote, erottimet))
    {
        int[] luvut = MerkkijonoLuvuiksi(lukusyote, erottimet);
        Console.WriteLine("Tulkittiin luvut:");
        TulostaTaulukko(luvut);
        Console.WriteLine("Antamiesi lukujen summa on : " + LaskeYhteen(luvut));
    }
    else
        Console.WriteLine("Annoit muuta kuin lukuja, tai tyhjan jonon");
    Console.ReadKey();
}

/// &lt;summary&gt;
/// Aliohjelma muuttaa annetun merkkijonon 
/// kokonaislukutaulukoksi siten, etta luvut 
/// erotellaan annetun merkkitaulukon (erotinmerkkien)
/// perusteella. Syötteen tulee sisältää vain
/// lukuja ja erotinmerkkejä.
/// &lt;/summary&gt;
/// &lt;param name="lukusyote"&gt;Muunnettava merkkijono&lt;/param&gt;
/// &lt;param name="erottimet"&gt;Sallitut erotinmerkit merkkitaulukossa&lt;/param&gt;
/// &lt;returns&gt;Merkkijonosta selvitetty kokonaislukutaulukko.&lt;/returns&gt;
/// &lt;example&gt;
/// &lt;pre name="test"&gt;
/// int[] luvut1 = MjLuvuiksi.MerkkijonoLuvuiksi("1 2 3", new char[] {' '});
/// String.Join(",", luvut1) === "1,2,3";
/// int[] luvut2 = MjLuvuiksi.MerkkijonoLuvuiksi(",,1,, 2 ,3", new char[] {' ', ','});
/// String.Join(",", luvut2) === "1,2,3";
/// int[] luvut3 = MjLuvuiksi.MerkkijonoLuvuiksi("", new char[] {' '});
/// String.Join(",", luvut3) === "";
/// &lt;/pre&gt;
/// &lt;/example&gt;
public static int[] MerkkijonoLuvuiksi(string lukusyote, char[] erottimet)
{
    // Tyhjat pois edesta ja lopusta (Trim) 
    // Jos on annettu ylimaaraisia valilyonteja, ei lisata niita taulukkoon.            
    String[] pilkottu = 
       lukusyote.Trim().Split(erottimet, StringSplitOptions.RemoveEmptyEntries);
    int[] luvut = new int[pilkottu.Length]; // luvut[] saa kookseen saman kuin
                                            //  pilkottu[]
    for (int i = 0; i &lt; pilkottu.Length; i++)
        luvut[i] = int.Parse(pilkottu[i]);
    return luvut;
}

/// &lt;summary&gt;
/// Laskee kokonaislukutaulukon alkiot yhteen ja palauttaa alkioiden summan.
/// &lt;/summary&gt;
/// &lt;param name="luvut"&gt;Tutkittava kokonaislukutaulukko&lt;/param&gt;
/// &lt;returns&gt;Taulukon alkioiden summa&lt;/returns&gt;
/// &lt;example&gt;
/// &lt;pre name="test"&gt;
/// int[] luvut1 = {5, 7, 9, 10};
/// MjLuvuiksi.LaskeYhteen(luvut1) === 31;
/// int[] luvut2 = {-5, 5, -10, 10};
/// MjLuvuiksi.LaskeYhteen(luvut2) === 0;
/// int[] luvut3 = {};
/// MjLuvuiksi.LaskeYhteen(luvut3) === 0;
/// &lt;/pre&gt;
/// &lt;/example&gt;
public static int LaskeYhteen(int[] luvut)
{
    int summa = 0;
    for (int i = 0; i &lt; luvut.Length; i++)
        summa += luvut[i];
    return summa;
}

/// &lt;summary&gt;
/// Aliohjelmassa tutkitaan sisaltaako merkkijono muitakin
/// merkkeja kuin positiivisia kokonaislukuja ja erotinmerkkeja.
/// &lt;/summary&gt;
/// &lt;param name="lukusyote"&gt;Tutkittava merkkinojo, 
/// josta etsitaan vieraita merkkeja&lt;/param&gt;
/// &lt;param name="erottimet"&gt;Sallitut erotinmerkit 
/// merkkitaulukossa&lt;/param&gt;
/// &lt;returns&gt;Onko pelkkiä lukuja&lt;/returns&gt;
/// &lt;example&gt;
/// &lt;pre name="test"&gt;
/// MjLuvuiksi.OnkoVainLukuja("1,2,3", new char[]{','}) === true;
/// MjLuvuiksi.OnkoVainLukuja("1, 2, 3", new char[]{','}) === false;
/// MjLuvuiksi.OnkoVainLukuja("1, 2, 3", new char[]{',', ' '}) === true;
/// MjLuvuiksi.OnkoVainLukuja("", new char[]{' '}) === false;
/// &lt;/pre&gt;
/// &lt;/example&gt;
public static bool OnkoVainLukuja(string lukusyote, char[] erottimet)
{
    // Jos yhtaan merkkia ei ole annettu, 
    // palautetaan automaattisesti kielteinen vastaus.
    if (lukusyote.Length == 0) return false; 
    for (int i = 0; i &lt; erottimet.Length; i++)
        // Korvataan erotinmerkit tyhjalla merkkijonolla, 
        // silla olemme kiinnostuneita vain "varsinaisesta sisallosta"
        lukusyote = lukusyote.Replace(erottimet[i].ToString(), "");

    foreach (char merkki in lukusyote)
        // Jos yksikin merkki on jokin muu kuin numero, 
        // palautetaan kielteinen vastaus.
        if (!Char.IsDigit(merkki)) return false; 
    return true;
}

/// &lt;summary&gt;
/// Tulostetaan kokonaislukutaulukon osat foreach-silmukassa
/// &lt;/summary&gt;
/// &lt;param name="t"&gt;Tulostettava taulukko&lt;/param&gt;
public static void TulostaTaulukko(int[] t)
{
    foreach (int pala in t)
        Console.WriteLine(pala);
    Console.WriteLine("-------------------------------");
}
</code></pre>