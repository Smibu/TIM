"""Creates the Flask application for TIM.

Insert only configuration-related things in this file. Do NOT define routes here.

"""
import inspect
import mimetypes
import sys

from flask import Flask
from flask_migrate import Migrate
from sqlalchemy.sql.ddl import CreateTable

from timApp.document.timjsonencoder import TimJsonEncoder
from timApp.item.tag import Tag
from timApp.util.flask.filters import map_format, timdate, humanize_timedelta, humanize_datetime
from timApp.korppi.openid import KorppiOpenID
from timApp.util.logger import setup_logging
from timApp.gamification.docgamified import DocGamified
from timApp.gamification.documentgamificationpoint import DocumentGamificationPoint
from timApp.gamification.gamificationdocument import GamificationDocument
from timApp.gamification.gamificationdocumenttype import GamificationDocumentType
from timApp.gamification.gamificationpointtype import GamificationPointType
from timApp.gamification.usergamification import UserGamification
from timApp.lecture.askedjson import AskedJson
from timApp.lecture.askedquestion import AskedQuestion
from timApp.item.block import Block
from timApp.document.docentry import DocEntry
from timApp.folder.folder import Folder
from timApp.lecture.lecture import Lecture
from timApp.lecture.lectureanswer import LectureAnswer
from timApp.lecture.message import Message
from timApp.user.newuser import NewUser
from timApp.notification.notification import Notification
from timApp.printing.printeddoc import PrintedDoc
from timApp.document.translation.translation import Translation
from timApp.user.user import User
from timApp.user.usergroup import UserGroup
from timApp.lecture.runningquestion import Runningquestion
from timApp.timdb.sqa import db
from timApp.lecture.question import Question
from timApp.lecture.lectureusers import LectureUsers
from timApp.lecture.questionactivity import QuestionActivity
from timApp.lecture.showpoints import Showpoints
from timApp.lecture.useractivity import Useractivity
from timApp.slide.slidestatus import SlideStatus
from timApp.user.usergroupmember import UserGroupMember
from timApp.auth.auth_models import AccessType, BlockAccess
from timApp.note.usernote import UserNote
from timApp.answer.answer_models import AnswerTag, AnswerUpload, UserAnswer
from timApp.readmark.readparagraph import ReadParagraph
from timApp.answer.answer import Answer
from timApp.velp.velp_models import Velp, VelpContent, VelpGroup, VelpGroupDefaults, VelpGroupLabel, \
    VelpGroupSelection, VelpGroupsInDocument, VelpInGroup, VelpLabel, VelpLabelContent, VelpVersion, ImportedVelpGroups, \
    LabelInVelp, LabelInVelpGroup, Annotation, AnnotationComment, Icon


def reg_models(*_):
    pass


reg_models(
    AccessType,
    Annotation,
    AnnotationComment,
    Answer,
    AnswerTag,
    AnswerUpload,
    AskedJson,
    AskedQuestion,
    Block,
    BlockAccess,
    DocEntry,
    DocGamified,
    DocumentGamificationPoint,
    Folder,
    GamificationDocument,
    GamificationDocumentType,
    GamificationPointType,
    Icon,
    ImportedVelpGroups,
    LabelInVelp,
    LabelInVelpGroup,
    Lecture,
    LectureAnswer,
    LectureUsers,
    Message,
    NewUser,
    Notification,
    PrintedDoc,
    Question,
    QuestionActivity,
    ReadParagraph,
    Runningquestion,
    Showpoints,
    SlideStatus,
    Tag,
    Translation,
    User,
    Useractivity,
    UserAnswer,
    UserGamification,
    UserGroup,
    UserGroupMember,
    UserNote,
    Velp,
    VelpContent,
    VelpGroup,
    VelpGroupDefaults,
    VelpGroupLabel,
    VelpGroupSelection,
    VelpGroupsInDocument,
    VelpInGroup,
    VelpLabel,
    VelpLabelContent,
    VelpVersion,
)

from timApp.util.utils import datestr_to_relative, date_to_relative

sys.setrecursionlimit(10000)
app = Flask(__name__)

app.jinja_env.auto_reload = True  # uncomment this to autoreload templates

app.jinja_env.trim_blocks = True
app.jinja_env.lstrip_blocks = True
app.config.from_pyfile('defaultconfig.py', silent=False)
app.config.from_envvar('TIM_SETTINGS', silent=True)
setup_logging(app)
default_secret = app.config['SECRET_KEY']

# Compress(app)
db.init_app(app)
db.app = app
migrate = Migrate(app, db)
oid = KorppiOpenID(app, safe_roots=['https://korppi.jyu.fi'])

app.jinja_env.filters['map_format'] = map_format
app.jinja_env.filters['datestr_to_relative'] = datestr_to_relative
app.jinja_env.filters['date_to_relative'] = date_to_relative
app.jinja_env.filters['timdate'] = timdate
app.jinja_env.filters['timtimedelta'] = humanize_timedelta
app.jinja_env.filters['timreldatetime'] = humanize_datetime
app.jinja_env.add_extension('jinja2.ext.do')

mimetypes.add_type('text/plain', '.scss')

app.json_encoder = TimJsonEncoder


def print_schema(bind: str = 'tim_main'):
    """Prints the database schema generated by the models.

    :param bind: The bind to use. Default is tim_main.

    """
    models = inspect.getmembers(sys.modules[__name__], lambda x: inspect.isclass(x) and hasattr(x, '__table__'))
    eng = db.get_engine(app, bind)

    for _, model_class in models:
        print(CreateTable(model_class.__table__).compile(eng), end=';')
    print()
    sys.stdout.flush()

# print_schema()
