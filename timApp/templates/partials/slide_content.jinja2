{# Idea:
   We put every slide into two <section> elements so that each slide actually has at least one subslide.
   This allows to have multiple subslides by simply wrapping each subslide into its own <section>

   Slide breaking is done with a few indicators:
   * Blocks with horizontal line indicators (---) => changes whole slide
   * Headings (#, ##, ###) => if previous block wasn't a horizontal line indicator, changes the whole slide
   * slide_break block attribute => if 'sub', changes the block to a subslide until the next slide break occurs
#}

<section>
    <section>
    {# We use namespaces to properly handle the scoping rules #}
    {% set ns = namespace(prev_is_empty=True, cur_is_sub=False, area_depth=0) %}
    {% macro sectionchange(sub) %}
        {% if ns.cur_is_sub %}
            {# Current is a subslide => close last subslide and open new one #}
            </section><section>
        {% else %}
            {# Current one is main slide
               => close subslide and main slide and open new slide and its first subslide #}
            </section></section><section><div>
        {% endif %}
    {% endmacro %}
    {% for t in text %}
        {% set ns.cur_is_sub = t.attrs['slide_break'] == 'sub' %}
        {% if 'settings' in t.attrs %}
            {# do nothing #}
        {% elif (t.md.startswith('---') and t.md.endswith('---')) %}
            {% if not ns.prev_is_empty and ns.area_depth == 0 %}
                {{ sectionchange() }}
                {% set ns.prev_is_empty = True %}
            {% endif %}
        {% else %}
            {% if 'slide_break' in t.attrs and not ns.prev_is_empty and ns.area_depth == 0 %}
                {{ sectionchange() }}
            {% elif (t.output.startswith("<h1") or
                   t.output.startswith("<h2") or
                   t.output.startswith("<h3")) and not ns.prev_is_empty and ns.area_depth == 0 %}
                {{ sectionchange() }}
            {% endif %}

            {% if 'area' in t.attrs %}
                {% set ns.area_depth = ns.area_depth + 1 %}
                <div class="{{ t.areainfo.area_class_str }} area_{{ t.attrs['area'] }}">
                <div class="areaContent {{ t.class_str }}" data-area="{{area_name}}">
            {% endif %}
            <div class="{{ t.html_class }}"
                 id="{{ t.id }}"
                 t="{{ t.hash }}"
                 attrs="{{ t.attrs_str }}">
                {{ t.output|safe }}
            </div>
            {% if 'area_end' in t.attrs %}
                {% set ns.area_depth = ns.area_depth - 1 %}
                </div>
                </div>
            {% endif %}
            {% set ns.prev_is_empty = False %}
        {% endif %}
    {% endfor %}
{% if ns.cur_is_sub %}
    </section>
{% endif %}
</section>
