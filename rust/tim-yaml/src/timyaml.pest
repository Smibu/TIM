obj = ${
  block_start ~
  keyvalue ~
  (BLANK_LINES ~ PEEK_ALL ~ keyvalue)* ~
  DROP
}

indentation = _{ SPACE* }

yaml = _{ SOI ~ BLANK_LINE* ~ PUSH(indentation) ~ (obj | "") ~ DROP ~ EOI }

BLANK_LINES = _{ BLANK_LINE+ }

keyvalue = { basic_str ~ ":" ~ (BLANK_LINES | SPACE*) ~ value }

value = _{ multilinestr | obj | list | flow_obj | flow_list | boolean | number | basic_str | null }

flow_value = _{ flow_obj | flow_list | boolean | number | flow_str | null }

flow_str = _{ flow_unquoted_str | double_quoted_str | single_quoted_str }

flow_obj_element = { flow_str ~ SPACE* ~ ":" ~ W ~ flow_value }

flow_obj = { "{" ~ W ~ (flow_obj_element ~ (W ~ "," ~ W ~ flow_obj_element)* ~ ("," ~ W)?)? ~ W ~ "}" }

list_element = { "-" ~ &EOW ~ SPACE* ~ value }

block_start = _{
  BLANK_LINE* ~
  PEEK_ALL ~ // require correct indentation
  PUSH(indentation) // new indentation, if any
}

list = {
  block_start ~
  list_element ~
  (BLANK_LINES ~ PEEK_ALL ~ list_element)* ~
  DROP
}

multilinestr = _{ tim_multiline_str | standard_yaml_multiline_str }

tim_multiline_str_content = { (!(PEEK ~ NEWLINE) ~ multiline_str_line ~ NEWLINE)* }

tim_multiline_str = {
  "|" ~
  SPACE* ~
  PUSH(multiline_str_line) ~
  NEWLINE ~
  tim_multiline_str_content ~
  POP
}

multiline_str_line = { (!NEWLINE ~ ANY)+ }

standard_yaml_multiline_str = { standard_yaml_multiline_str_noindent | standard_yaml_multiline_str_1 }

std_multiline_start = _{ "|" | ">" }

standard_yaml_multiline_str_noindent = _{
  std_multiline_start ~
  ("-" | "+")? ~
  NEWLINE ~
  PEEK_ALL ~
  PUSH(SPACE+) ~
  standard_yaml_multiline_end
}

standard_yaml_multiline_str_1 = _{
  std_multiline_start ~
  "1" ~
  ("-" | "+")? ~
  NEWLINE ~
  PEEK_ALL ~
  PUSH(" ") ~
  standard_yaml_multiline_end
}

standard_yaml_multiline_end = _{
  multiline_str_line ~
  (NEWLINE ~ PEEK_ALL ~ multiline_str_line)* ~
  DROP
}

basic_str = _{ unquoted_str | double_quoted_str | single_quoted_str }

unquoted_str = { !illegal_unquoted_start_char ~ ((!(NEWLINE | COMMENT | (":" ~ EOW)) | (NEWLINE ~ PEEK_ALL ~ SPACE+)+) ~ ANY)+ }

flow_unquoted_str = { !illegal_unquoted_start_char ~ (!(COMMENT | (":" ~ EOW) | "," | "[" | "]" | "{" | "}") ~ ANY)+ }

double_quoted_str = { "\"" ~ (("\\" ~ ("\"" | "e" | "r" | "a" | "f" | "v" | "b" | "n" | ("x" ~ ASCII_HEX_DIGIT{2}) | ("u" ~ ASCII_HEX_DIGIT{4}))) | (!"\"" ~ ANY))* ~ "\"" }

single_quoted_str = { "'" ~ (!"'" ~ ANY)* ~ "'" }

illegal_unquoted_start_char = {
  "&" | "%" | "'" | "\"" | "@" | "!" | "[" | "]" | "*" | "|" | "`" | ">" | "," | "{" | "}"
  | (("?" | "-" | "=" | "~") ~ EOW)
}

// end of word
EOW = _{ NEWLINE | EOI | SPACE }

boolean = { "true" | "false" | "yes" | "no" }

number = { '0'..'9'+ }

null = { "null" | "" }

flow_list_element = _{ flow_unquoted_str | double_quoted_str | single_quoted_str }

W = _{ (WHITESPACE | COMMENT)* }

flow_list = { "[" ~ W ~ (flow_list_element ~ (W ~ "," ~ W ~ flow_list_element)* ~ ("," ~ W)?)? ~ W ~ "]" }

SPACE = _{ " " }

WHITESPACE = _{ SPACE | NEWLINE }

BLANK_LINE = _{ COMMENT | NEWLINE | SPACE* ~ &NEWLINE }

COMMENT = _{ (WHITESPACE | SOI) ~ "#" ~ (!NEWLINE ~ ANY)* }
